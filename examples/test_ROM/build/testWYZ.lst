                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module testWYZ
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _my_isr0
                             13 	.globl _WYZresume
                             14 	.globl _WYZpause
                             15 	.globl _WYZsetLoop
                             16 	.globl _WYZplayAY
                             17 	.globl _WYZdecode
                             18 	.globl _WYZloadSong
                             19 	.globl _WYZinit
                             20 	.globl _install_isr
                             21 	.globl _PRINT
                             22 	.globl _LOCATE
                             23 	.globl _COLOR
                             24 	.globl _WIDTH
                             25 	.globl _SCREEN1
                             26 	.globl _firstPATaddr
                             27 	.globl _keyB7semaphore
                             28 	.globl _SPRBUFFER
                             29 	.globl _VALUE
                             30 	.globl _presskey
                             31 	.globl _text02
                             32 	.globl _text01
                             33 	.globl _PlaySong
                             34 	.globl _PauseSong
                             35 	.globl _ChangeLoop
                             36 	.globl _SetSpritesSize
                             37 	.globl _PEEK
                             38 	.globl _POKE
                             39 	.globl _CopyMEM
                             40 	.globl _VPEEK
                             41 	.globl _INKEY
                             42 	.globl _WAIT
                             43 	.globl _GetKeyMatrix
                             44 	.globl _ShowVumeter
                             45 	.globl _SetSPRITES
                             46 ;--------------------------------------------------------
                             47 ; special function registers
                             48 ;--------------------------------------------------------
                             49 ;--------------------------------------------------------
                             50 ; ram data
                             51 ;--------------------------------------------------------
                             52 	.area _DATA
   0000                      53 _VALUE::
   0000                      54 	.ds 1
   0001                      55 _SPRBUFFER::
   0001                      56 	.ds 72
   0049                      57 _keyB7semaphore::
   0049                      58 	.ds 1
   004A                      59 _firstPATaddr::
   004A                      60 	.ds 2
                             61 ;--------------------------------------------------------
                             62 ; ram data
                             63 ;--------------------------------------------------------
                             64 	.area _INITIALIZED
                             65 ;--------------------------------------------------------
                             66 ; absolute external ram data
                             67 ;--------------------------------------------------------
                             68 	.area _DABS (ABS)
                             69 ;--------------------------------------------------------
                             70 ; global & static initialisations
                             71 ;--------------------------------------------------------
                             72 	.area _HOME
                             73 	.area _GSINIT
                             74 	.area _GSFINAL
                             75 	.area _GSINIT
                             76 ;--------------------------------------------------------
                             77 ; Home
                             78 ;--------------------------------------------------------
                             79 	.area _HOME
                             80 	.area _HOME
                             81 ;--------------------------------------------------------
                             82 ; code
                             83 ;--------------------------------------------------------
                             84 	.area _CODE
                             85 ;src\testWYZ.c:104: void my_isr0(void) __interrupt 
                             86 ;	---------------------------------
                             87 ; Function my_isr0
                             88 ; ---------------------------------
   0000                      89 _my_isr0::
   0000 FB            [ 4]   90 	ei
   0001 F5            [11]   91 	push	af
   0002 C5            [11]   92 	push	bc
   0003 D5            [11]   93 	push	de
   0004 E5            [11]   94 	push	hl
   0005 FD E5         [15]   95 	push	iy
                             96 ;src\testWYZ.c:106: DI;
   0007 F3            [ 4]   97 	di	
                             98 ;src\testWYZ.c:107: READ_VDP_STATUS;
   0008 DB 99         [11]   99 	in	a,(#0x99) 
                            100 ;src\testWYZ.c:110: WYZplayAY();
   000A CDr00r00      [17]  101 	call	_WYZplayAY
                            102 ;src\testWYZ.c:118: __endasm;
                            103 ;vuelca	a VRAM buffer atributos sprites
   000D 21r01r00      [10]  104 	ld	HL,#_SPRBUFFER
   0010 11 00 1B      [10]  105 	ld	DE,#0x1B00
   0013 01 50 00      [10]  106 	ld	BC,#20*4
   0016 CD 5C 00      [17]  107 	call	0x005C
                            108 ;src\testWYZ.c:121: EI;
   0019 FB            [ 4]  109 	ei	
   001A FD E1         [14]  110 	pop	iy
   001C E1            [10]  111 	pop	hl
   001D D1            [10]  112 	pop	de
   001E C1            [10]  113 	pop	bc
   001F F1            [10]  114 	pop	af
   0020 ED 4D         [14]  115 	reti
   0022                     116 _text01:
   0022 54 65 73 74 20 57   117 	.ascii "Test WYZ player Lib for SDCC"
        59 5A 20 70 6C 61
        79 65 72 20 4C 69
        62 20 66 6F 72 20
        53 44 43 43
   003E 00                  118 	.db 0x00
   003F                     119 _text02:
   003F 76 31 2E 30 20 28   120 	.ascii "v1.0 (05/06/2019)"
        30 35 2F 30 36 2F
        32 30 31 39 29
   0050 00                  121 	.db 0x00
   0051                     122 _presskey:
   0051 50 72 65 73 73 20   123 	.ascii "Press a key to Play"
        61 20 6B 65 79 20
        74 6F 20 50 6C 61
        79
   0064 00                  124 	.db 0x00
                            125 ;src\testWYZ.c:130: void main(void)
                            126 ;	---------------------------------
                            127 ; Function main
                            128 ; ---------------------------------
   0065                     129 _main::
   0065 DD E5         [15]  130 	push	ix
   0067 DD 21 00 00   [14]  131 	ld	ix,#0
   006B DD 39         [15]  132 	add	ix,sp
   006D F5            [11]  133 	push	af
                            134 ;src\testWYZ.c:137: keyB7semaphore=false;
   006E 21r49r00      [10]  135 	ld	hl,#_keyB7semaphore + 0
   0071 36 00         [10]  136 	ld	(hl), #0x00
                            137 ;src\testWYZ.c:139: COLOR(WHITE,DARK_BLUE,LIGHT_BLUE);
   0073 21 04 05      [10]  138 	ld	hl,#0x0504
   0076 E5            [11]  139 	push	hl
   0077 3E 0F         [ 7]  140 	ld	a,#0x0f
   0079 F5            [11]  141 	push	af
   007A 33            [ 6]  142 	inc	sp
   007B CDr00r00      [17]  143 	call	_COLOR
   007E F1            [10]  144 	pop	af
   007F 33            [ 6]  145 	inc	sp
                            146 ;src\testWYZ.c:141: WIDTH(32);
   0080 3E 20         [ 7]  147 	ld	a,#0x20
   0082 F5            [11]  148 	push	af
   0083 33            [ 6]  149 	inc	sp
   0084 CDr00r00      [17]  150 	call	_WIDTH
   0087 33            [ 6]  151 	inc	sp
                            152 ;src\testWYZ.c:142: SCREEN1();    
   0088 CDr00r00      [17]  153 	call	_SCREEN1
                            154 ;src\testWYZ.c:143: SetSpritesSize(1);  
   008B 3E 01         [ 7]  155 	ld	a,#0x01
   008D F5            [11]  156 	push	af
   008E 33            [ 6]  157 	inc	sp
   008F CDr27r02      [17]  158 	call	_SetSpritesSize
   0092 33            [ 6]  159 	inc	sp
                            160 ;src\testWYZ.c:145: LOCATE(0,0);
   0093 21 00 00      [10]  161 	ld	hl,#0x0000
   0096 E5            [11]  162 	push	hl
   0097 CDr00r00      [17]  163 	call	_LOCATE
                            164 ;src\testWYZ.c:146: PRINT(text01);
   009A 21r22r00      [10]  165 	ld	hl, #_text01
   009D E3            [19]  166 	ex	(sp),hl
   009E CDr00r00      [17]  167 	call	_PRINT
                            168 ;src\testWYZ.c:147: PRINT("\n");
   00A1 21r95r01      [10]  169 	ld	hl, #___str_3
   00A4 E3            [19]  170 	ex	(sp),hl
   00A5 CDr00r00      [17]  171 	call	_PRINT
                            172 ;src\testWYZ.c:148: PRINT(text02);
   00A8 21r3Fr00      [10]  173 	ld	hl, #_text02
   00AB E3            [19]  174 	ex	(sp),hl
   00AC CDr00r00      [17]  175 	call	_PRINT
                            176 ;src\testWYZ.c:150: PRINT("\n\n");
   00AF 21r97r01      [10]  177 	ld	hl, #___str_4
   00B2 E3            [19]  178 	ex	(sp),hl
   00B3 CDr00r00      [17]  179 	call	_PRINT
                            180 ;src\testWYZ.c:152: PRINT("Song name:\n ");
   00B6 21r9Ar01      [10]  181 	ld	hl, #___str_5
   00B9 E3            [19]  182 	ex	(sp),hl
   00BA CDr00r00      [17]  183 	call	_PRINT
                            184 ;src\testWYZ.c:153: PRINT(Song_name);
   00BD 21r00r00      [10]  185 	ld	hl, #_Song_name
   00C0 E3            [19]  186 	ex	(sp),hl
   00C1 CDr00r00      [17]  187 	call	_PRINT
                            188 ;src\testWYZ.c:155: PRINT("\n\n");
   00C4 21r97r01      [10]  189 	ld	hl, #___str_4
   00C7 E3            [19]  190 	ex	(sp),hl
   00C8 CDr00r00      [17]  191 	call	_PRINT
                            192 ;src\testWYZ.c:157: PRINT("Author:\n ");
   00CB 21rA7r01      [10]  193 	ld	hl, #___str_6
   00CE E3            [19]  194 	ex	(sp),hl
   00CF CDr00r00      [17]  195 	call	_PRINT
                            196 ;src\testWYZ.c:158: PRINT(Song_author);
   00D2 21r00r00      [10]  197 	ld	hl, #_Song_author
   00D5 E3            [19]  198 	ex	(sp),hl
   00D6 CDr00r00      [17]  199 	call	_PRINT
   00D9 F1            [10]  200 	pop	af
                            201 ;src\testWYZ.c:167: WYZinit((unsigned int) WYZ_songs, (unsigned int) WYZ_instruments, (unsigned int) WYZ_FXs, (unsigned int) WYZ_notas);   
   00DA 01r00r00      [10]  202 	ld	bc,#_WYZ_notas
   00DD DD 36 FEr00   [19]  203 	ld	-2 (ix),#<(_WYZ_FXs)
   00E1 DD 36 FFs00   [19]  204 	ld	-1 (ix),#>(_WYZ_FXs)
   00E5 11r00r00      [10]  205 	ld	de,#_WYZ_instruments
   00E8 21r00r00      [10]  206 	ld	hl,#_WYZ_songs
   00EB C5            [11]  207 	push	bc
   00EC DD 4E FE      [19]  208 	ld	c,-2 (ix)
   00EF DD 46 FF      [19]  209 	ld	b,-1 (ix)
   00F2 C5            [11]  210 	push	bc
   00F3 D5            [11]  211 	push	de
   00F4 E5            [11]  212 	push	hl
   00F5 CDr00r00      [17]  213 	call	_WYZinit
   00F8 21 08 00      [10]  214 	ld	hl,#8
   00FB 39            [11]  215 	add	hl,sp
   00FC F9            [ 6]  216 	ld	sp,hl
                            217 ;src\testWYZ.c:179: LOCATE(0,10);
   00FD 21 00 0A      [10]  218 	ld	hl,#0x0a00
   0100 E5            [11]  219 	push	hl
   0101 CDr00r00      [17]  220 	call	_LOCATE
                            221 ;src\testWYZ.c:180: PRINT("STOP for Mute the song\n");
   0104 21rB1r01      [10]  222 	ld	hl, #___str_7
   0107 E3            [19]  223 	ex	(sp),hl
   0108 CDr00r00      [17]  224 	call	_PRINT
                            225 ;src\testWYZ.c:181: PRINT("SELECT for change Loop mode\n");
   010B 21rC9r01      [10]  226 	ld	hl, #___str_8
   010E E3            [19]  227 	ex	(sp),hl
   010F CDr00r00      [17]  228 	call	_PRINT
                            229 ;src\testWYZ.c:182: PRINT("RETURN for Play song\n"); 
   0112 21rE6r01      [10]  230 	ld	hl, #___str_9
   0115 E3            [19]  231 	ex	(sp),hl
   0116 CDr00r00      [17]  232 	call	_PRINT
   0119 F1            [10]  233 	pop	af
                            234 ;src\testWYZ.c:184: SetSPRITES();
   011A CDr3Br03      [17]  235 	call	_SetSPRITES
                            236 ;src\testWYZ.c:186: install_isr(my_isr0);
   011D 21r00r00      [10]  237 	ld	hl,#_my_isr0
   0120 E5            [11]  238 	push	hl
   0121 CDr00r00      [17]  239 	call	_install_isr
   0124 F1            [10]  240 	pop	af
                            241 ;src\testWYZ.c:188: while(1)
   0125                     242 00113$:
                            243 ;src\testWYZ.c:190: HALT;
   0125 76            [ 4]  244 	halt	
                            245 ;src\testWYZ.c:221: ShowVumeter(0,PSG_REG_SEC[AY_AmplA]);
   0126 21r08r00      [10]  246 	ld	hl, #_PSG_REG_SEC + 8
   0129 46            [ 7]  247 	ld	b,(hl)
   012A C5            [11]  248 	push	bc
   012B 33            [ 6]  249 	inc	sp
   012C AF            [ 4]  250 	xor	a, a
   012D F5            [11]  251 	push	af
   012E 33            [ 6]  252 	inc	sp
   012F CDrE3r02      [17]  253 	call	_ShowVumeter
   0132 F1            [10]  254 	pop	af
                            255 ;src\testWYZ.c:222: ShowVumeter(1,PSG_REG_SEC[AY_AmplB]);
   0133 21r09r00      [10]  256 	ld	hl, #_PSG_REG_SEC + 9
   0136 46            [ 7]  257 	ld	b,(hl)
   0137 C5            [11]  258 	push	bc
   0138 33            [ 6]  259 	inc	sp
   0139 3E 01         [ 7]  260 	ld	a,#0x01
   013B F5            [11]  261 	push	af
   013C 33            [ 6]  262 	inc	sp
   013D CDrE3r02      [17]  263 	call	_ShowVumeter
   0140 F1            [10]  264 	pop	af
                            265 ;src\testWYZ.c:223: ShowVumeter(2,PSG_REG_SEC[AY_AmplC]);
   0141 21r0Ar00      [10]  266 	ld	hl, #_PSG_REG_SEC + 10
   0144 46            [ 7]  267 	ld	b,(hl)
   0145 C5            [11]  268 	push	bc
   0146 33            [ 6]  269 	inc	sp
   0147 3E 02         [ 7]  270 	ld	a,#0x02
   0149 F5            [11]  271 	push	af
   014A 33            [ 6]  272 	inc	sp
   014B CDrE3r02      [17]  273 	call	_ShowVumeter
                            274 ;src\testWYZ.c:228: keyPressed = GetKeyMatrix(7);  
   014E 26 07         [ 7]  275 	ld	h,#0x07
   0150 E3            [19]  276 	ex	(sp),hl
   0151 33            [ 6]  277 	inc	sp
   0152 CDrD1r02      [17]  278 	call	_GetKeyMatrix
   0155 33            [ 6]  279 	inc	sp
   0156 4D            [ 4]  280 	ld	c,l
                            281 ;src\testWYZ.c:229: if (keyPressed!=0xFF)  //pressure control of the keys
   0157 79            [ 4]  282 	ld	a,c
   0158 3C            [ 4]  283 	inc	a
   0159 28 30         [12]  284 	jr	Z,00110$
                            285 ;src\testWYZ.c:231: if(keyB7semaphore==false)
   015B 3Ar49r00      [13]  286 	ld	a,(#_keyB7semaphore + 0)
   015E B7            [ 4]  287 	or	a, a
   015F 20 2F         [12]  288 	jr	NZ,00111$
                            289 ;src\testWYZ.c:233: if (!(keyPressed&16))    //STOP Key
   0161 CB 61         [ 8]  290 	bit	4, c
   0163 20 0A         [12]  291 	jr	NZ,00102$
                            292 ;src\testWYZ.c:235: keyB7semaphore=true;
   0165 21r49r00      [10]  293 	ld	hl,#_keyB7semaphore + 0
   0168 36 01         [10]  294 	ld	(hl), #0x01
                            295 ;src\testWYZ.c:236: PauseSong(); 
   016A C5            [11]  296 	push	bc
   016B CDr04r02      [17]  297 	call	_PauseSong
   016E C1            [10]  298 	pop	bc
   016F                     299 00102$:
                            300 ;src\testWYZ.c:238: if (!(keyPressed&64))    //SELECT Key
   016F CB 71         [ 8]  301 	bit	6, c
   0171 20 0A         [12]  302 	jr	NZ,00104$
                            303 ;src\testWYZ.c:240: keyB7semaphore=true;
   0173 21r49r00      [10]  304 	ld	hl,#_keyB7semaphore + 0
   0176 36 01         [10]  305 	ld	(hl), #0x01
                            306 ;src\testWYZ.c:241: ChangeLoop(); 
   0178 C5            [11]  307 	push	bc
   0179 CDr0Fr02      [17]  308 	call	_ChangeLoop
   017C C1            [10]  309 	pop	bc
   017D                     310 00104$:
                            311 ;src\testWYZ.c:243: if (!(keyPressed&128))    //RETURN Key
   017D CB 79         [ 8]  312 	bit	7, c
   017F 20 0F         [12]  313 	jr	NZ,00111$
                            314 ;src\testWYZ.c:245: keyB7semaphore=true;
   0181 21r49r00      [10]  315 	ld	hl,#_keyB7semaphore + 0
   0184 36 01         [10]  316 	ld	(hl), #0x01
                            317 ;src\testWYZ.c:246: PlaySong(); 
   0186 CDrFCr01      [17]  318 	call	_PlaySong
   0189 18 05         [12]  319 	jr	00111$
   018B                     320 00110$:
                            321 ;src\testWYZ.c:250: keyB7semaphore=false;        
   018B 21r49r00      [10]  322 	ld	hl,#_keyB7semaphore + 0
   018E 36 00         [10]  323 	ld	(hl), #0x00
   0190                     324 00111$:
                            325 ;src\testWYZ.c:256: WYZdecode();
   0190 CDr00r00      [17]  326 	call	_WYZdecode
   0193 18 90         [12]  327 	jr	00113$
   0195                     328 ___str_3:
   0195 0A                  329 	.db 0x0a
   0196 00                  330 	.db 0x00
   0197                     331 ___str_4:
   0197 0A                  332 	.db 0x0a
   0198 0A                  333 	.db 0x0a
   0199 00                  334 	.db 0x00
   019A                     335 ___str_5:
   019A 53 6F 6E 67 20 6E   336 	.ascii "Song name:"
        61 6D 65 3A
   01A4 0A                  337 	.db 0x0a
   01A5 20                  338 	.ascii " "
   01A6 00                  339 	.db 0x00
   01A7                     340 ___str_6:
   01A7 41 75 74 68 6F 72   341 	.ascii "Author:"
        3A
   01AE 0A                  342 	.db 0x0a
   01AF 20                  343 	.ascii " "
   01B0 00                  344 	.db 0x00
   01B1                     345 ___str_7:
   01B1 53 54 4F 50 20 66   346 	.ascii "STOP for Mute the song"
        6F 72 20 4D 75 74
        65 20 74 68 65 20
        73 6F 6E 67
   01C7 0A                  347 	.db 0x0a
   01C8 00                  348 	.db 0x00
   01C9                     349 ___str_8:
   01C9 53 45 4C 45 43 54   350 	.ascii "SELECT for change Loop mode"
        20 66 6F 72 20 63
        68 61 6E 67 65 20
        4C 6F 6F 70 20 6D
        6F 64 65
   01E4 0A                  351 	.db 0x0a
   01E5 00                  352 	.db 0x00
   01E6                     353 ___str_9:
   01E6 52 45 54 55 52 4E   354 	.ascii "RETURN for Play song"
        20 66 6F 72 20 50
        6C 61 79 20 73 6F
        6E 67
   01FA 0A                  355 	.db 0x0a
   01FB 00                  356 	.db 0x00
                            357 ;src\testWYZ.c:271: void PlaySong()
                            358 ;	---------------------------------
                            359 ; Function PlaySong
                            360 ; ---------------------------------
   01FC                     361 _PlaySong::
                            362 ;src\testWYZ.c:273: WYZloadSong(0);
   01FC AF            [ 4]  363 	xor	a, a
   01FD F5            [11]  364 	push	af
   01FE 33            [ 6]  365 	inc	sp
   01FF CDr00r00      [17]  366 	call	_WYZloadSong
   0202 33            [ 6]  367 	inc	sp
   0203 C9            [10]  368 	ret
                            369 ;src\testWYZ.c:277: void PauseSong()
                            370 ;	---------------------------------
                            371 ; Function PauseSong
                            372 ; ---------------------------------
   0204                     373 _PauseSong::
                            374 ;src\testWYZ.c:279: if((WYZstate & 0b00000010)==0) WYZresume();  //AND binario  
   0204 21r00r00      [10]  375 	ld	hl,#_WYZstate+0
   0207 CB 4E         [12]  376 	bit	1, (hl)
   0209 CAr00r00      [10]  377 	jp	Z,_WYZresume
                            378 ;src\testWYZ.c:280: else WYZpause();  
   020C C3r00r00      [10]  379 	jp  _WYZpause
                            380 ;src\testWYZ.c:285: void ChangeLoop()
                            381 ;	---------------------------------
                            382 ; Function ChangeLoop
                            383 ; ---------------------------------
   020F                     384 _ChangeLoop::
                            385 ;src\testWYZ.c:287: if((WYZstate & 0b00010000)==0) WYZsetLoop(true); 
   020F 21r00r00      [10]  386 	ld	hl,#_WYZstate+0
   0212 CB 66         [12]  387 	bit	4, (hl)
   0214 20 09         [12]  388 	jr	NZ,00102$
   0216 3E 01         [ 7]  389 	ld	a,#0x01
   0218 F5            [11]  390 	push	af
   0219 33            [ 6]  391 	inc	sp
   021A CDr00r00      [17]  392 	call	_WYZsetLoop
   021D 33            [ 6]  393 	inc	sp
   021E C9            [10]  394 	ret
   021F                     395 00102$:
                            396 ;src\testWYZ.c:288: else WYZsetLoop(false);  
   021F AF            [ 4]  397 	xor	a, a
   0220 F5            [11]  398 	push	af
   0221 33            [ 6]  399 	inc	sp
   0222 CDr00r00      [17]  400 	call	_WYZsetLoop
   0225 33            [ 6]  401 	inc	sp
   0226 C9            [10]  402 	ret
                            403 ;src\testWYZ.c:299: void SetSpritesSize(char size) __naked
                            404 ;	---------------------------------
                            405 ; Function SetSpritesSize
                            406 ; ---------------------------------
   0227                     407 _SetSpritesSize::
                            408 ;src\testWYZ.c:345: __endasm;
   0227 DD E5         [15]  409 	push	IX
   0229 DD 21 00 00   [14]  410 	ld	IX,#0
   022D DD 39         [15]  411 	add	IX,SP
   022F 21 E0 F3      [10]  412 	ld	HL,#0xF3DF +1 ; --- read vdp(1) from mem
   0232 46            [ 7]  413 	ld	B,(HL)
   0233 DD 7E 04      [19]  414 	ld	A,4(ix)
   0236 FE 01         [ 7]  415 	cp	#1
   0238 20 04         [12]  416 	jr	NZ,size8
   023A CB C8         [ 8]  417 	set	1,B ; 16x16
   023C 18 02         [12]  418 	jr	setSize
   023E                     419 	size8:
   023E CB 88         [ 8]  420 	res	1,B ; 8x8
   0240                     421 	setSize:
   0240 0E 01         [ 7]  422 	ld	C,#0x01
   0242 CDr48r02      [17]  423 	call	writeVDP
   0245 DD E1         [14]  424 	pop	IX
   0247 C9            [10]  425 	ret
   0248                     426 	writeVDP:
   0248 FD 21 DF F3   [14]  427 	ld	IY,#0xF3DF
   024C 59            [ 4]  428 	ld	E,C
   024D 16 00         [ 7]  429 	ld	D,#0
   024F FD 19         [15]  430 	add	IY,DE
   0251 FD 70 00      [19]  431 	ld	(IY),B ;save copy of vdp value in system var
   0254 78            [ 4]  432 	ld	A,B
   0255 F3            [ 4]  433 	di
   0256 D3 99         [11]  434 	out	(#0x99),A
   0258 79            [ 4]  435 	ld	A,C
   0259 F6 80         [ 7]  436 	or	#0x80 ;add 128 to VDP reg value
   025B D3 99         [11]  437 	out	(#0x99),A
   025D FB            [ 4]  438 	ei
   025E C9            [10]  439 	ret
                            440 ;src\testWYZ.c:353: char PEEK(uint address)
                            441 ;	---------------------------------
                            442 ; Function PEEK
                            443 ; ---------------------------------
   025F                     444 _PEEK::
                            445 ;src\testWYZ.c:367: __endasm;
   025F DD E5         [15]  446 	push	IX
   0261 DD 21 00 00   [14]  447 	ld	IX,#0
   0265 DD 39         [15]  448 	add	IX,SP
   0267 DD 6E 04      [19]  449 	ld	L,4(IX)
   026A DD 66 05      [19]  450 	ld	H,5(IX)
   026D 7E            [ 7]  451 	ld	A,(HL)
   026E 6F            [ 4]  452 	ld	L,A
   026F DD E1         [14]  453 	pop	IX
   0271 C9            [10]  454 	ret
                            455 ;src\testWYZ.c:372: void POKE(uint address, char value)
                            456 ;	---------------------------------
                            457 ; Function POKE
                            458 ; ---------------------------------
   0272                     459 _POKE::
                            460 ;src\testWYZ.c:386: __endasm;
   0272 DD E5         [15]  461 	push	IX
   0274 DD 21 00 00   [14]  462 	ld	IX,#0
   0278 DD 39         [15]  463 	add	IX,SP
   027A DD 6E 04      [19]  464 	ld	L,4(IX)
   027D DD 66 05      [19]  465 	ld	H,5(IX)
   0280 DD 7E 06      [19]  466 	ld	A,6(IX)
   0283 77            [ 7]  467 	ld	(HL),A
   0284 DD E1         [14]  468 	pop	IX
   0286 C9            [10]  469 	ret
                            470 ;src\testWYZ.c:400: void CopyMEM(unsigned int source, unsigned int destination, unsigned int length)
                            471 ;	---------------------------------
                            472 ; Function CopyMEM
                            473 ; ---------------------------------
   0287                     474 _CopyMEM::
                            475 ;src\testWYZ.c:420: __endasm;
   0287 DD E5         [15]  476 	push	IX
   0289 DD 21 00 00   [14]  477 	ld	IX,#0
   028D DD 39         [15]  478 	add	IX,SP
   028F DD 6E 04      [19]  479 	ld	L,4(IX)
   0292 DD 66 05      [19]  480 	ld	H,5(IX) ;source memory address
   0295 DD 5E 06      [19]  481 	ld	E,6(IX)
   0298 DD 56 07      [19]  482 	ld	D,7(IX) ;Destination RAM address
   029B DD 4E 08      [19]  483 	ld	C,8(IX)
   029E DD 46 09      [19]  484 	ld	B,9(IX) ;length
   02A1 ED B0         [21]  485 	ldir
   02A3 DD E1         [14]  486 	pop	IX
   02A5 C9            [10]  487 	ret
                            488 ;src\testWYZ.c:426: char VPEEK(uint address)
                            489 ;	---------------------------------
                            490 ; Function VPEEK
                            491 ; ---------------------------------
   02A6                     492 _VPEEK::
                            493 ;src\testWYZ.c:441: __endasm;
   02A6 DD E5         [15]  494 	push	IX
   02A8 DD 21 00 00   [14]  495 	ld	IX,#0
   02AC DD 39         [15]  496 	add	IX,SP
   02AE DD 6E 04      [19]  497 	ld	L,4(IX)
   02B1 DD 66 05      [19]  498 	ld	H,5(IX)
   02B4 CD 4A 00      [17]  499 	call	0x004A
   02B7 6F            [ 4]  500 	ld	L,A
   02B8 DD E1         [14]  501 	pop	IX
   02BA C9            [10]  502 	ret
                            503 ;src\testWYZ.c:449: char INKEY(){
                            504 ;	---------------------------------
                            505 ; Function INKEY
                            506 ; ---------------------------------
   02BB                     507 _INKEY::
                            508 ;src\testWYZ.c:453: __endasm;
   02BB CD 9F 00      [17]  509 	call	0x009F
   02BE 6F            [ 4]  510 	ld	L,A
   02BF C9            [10]  511 	ret
                            512 ;src\testWYZ.c:465: void WAIT(uint cicles)
                            513 ;	---------------------------------
                            514 ; Function WAIT
                            515 ; ---------------------------------
   02C0                     516 _WAIT::
                            517 ;src\testWYZ.c:468: for(i=0;i<cicles;i++) HALT;
   02C0 01 00 00      [10]  518 	ld	bc,#0x0000
   02C3                     519 00103$:
   02C3 21 02 00      [10]  520 	ld	hl,#2
   02C6 39            [11]  521 	add	hl,sp
   02C7 79            [ 4]  522 	ld	a,c
   02C8 96            [ 7]  523 	sub	a, (hl)
   02C9 78            [ 4]  524 	ld	a,b
   02CA 23            [ 6]  525 	inc	hl
   02CB 9E            [ 7]  526 	sbc	a, (hl)
   02CC D0            [11]  527 	ret	NC
   02CD 76            [ 4]  528 	halt	
   02CE 03            [ 6]  529 	inc	bc
                            530 ;src\testWYZ.c:469: return;
   02CF 18 F2         [12]  531 	jr	00103$
                            532 ;src\testWYZ.c:484: char GetKeyMatrix(char line)
                            533 ;	---------------------------------
                            534 ; Function GetKeyMatrix
                            535 ; ---------------------------------
   02D1                     536 _GetKeyMatrix::
                            537 ;src\testWYZ.c:499: __endasm;
   02D1 DD E5         [15]  538 	push	IX
   02D3 DD 21 00 00   [14]  539 	ld	IX,#0
   02D7 DD 39         [15]  540 	add	IX,SP
   02D9 DD 7E 04      [19]  541 	ld	A,4(IX)
   02DC CD 41 01      [17]  542 	call	0x0141
   02DF 6F            [ 4]  543 	ld	L,A
   02E0 DD E1         [14]  544 	pop	IX
   02E2 C9            [10]  545 	ret
                            546 ;src\testWYZ.c:539: void ShowVumeter(char channel, char value)
                            547 ;	---------------------------------
                            548 ; Function ShowVumeter
                            549 ; ---------------------------------
   02E3                     550 _ShowVumeter::
                            551 ;src\testWYZ.c:614: __endasm;
   02E3 DD E5         [15]  552 	push	IX
   02E5 DD 21 00 00   [14]  553 	ld	IX,#0
   02E9 DD 39         [15]  554 	add	IX,SP
   02EB DD 4E 04      [19]  555 	ld	C,4(IX)
   02EE DD 7E 05      [19]  556 	ld	A,5(IX)
                            557 ;C	= num channel
                            558 ;A	= value
                            559 ;showVumeter:
   02F1 32r00r00      [13]  560 	ld	(_VALUE),A
   02F4 CB 21         [ 8]  561 	SLA	C
   02F6 CB 21         [ 8]  562 	SLA	C
   02F8 06 00         [ 7]  563 	ld	B,#0
   02FA                     564 	L00107:
   02FA 79            [ 4]  565 	ld	a,c
   02FB 6F            [ 4]  566 	ld	l,a
   02FC 17            [ 4]  567 	rla
   02FD 9F            [ 4]  568 	sbc	a, a
   02FE 67            [ 4]  569 	ld	h,a
   02FF 29            [11]  570 	add	hl,hl
   0300 29            [11]  571 	add	hl,hl
   0301 11r01r00      [10]  572 	ld	DE,#_SPRBUFFER
   0304 19            [11]  573 	ADD	HL,DE
   0305 EB            [ 4]  574 	ex	DE,HL
   0306 13            [ 6]  575 	inc	DE
   0307 13            [ 6]  576 	inc	DE
   0308 3Ar00r00      [13]  577 	ld	A,(_VALUE)
   030B FE 00         [ 7]  578 	cp	#0
   030D 20 04         [12]  579 	jr	NZ,L00102
   030F AF            [ 4]  580 	xor	A
   0310 12            [ 7]  581 	ld	(DE),A
   0311 18 1E         [12]  582 	jr	L00105
   0313                     583 	L00102:
   0313 3Ar00r00      [13]  584 	ld	A,(_VALUE)
   0316 FE 04         [ 7]  585 	cp	#4
   0318 38 0D         [12]  586 	jr	C,L00104
   031A 3E 10         [ 7]  587 	ld	A,#16
   031C 12            [ 7]  588 	ld	(DE),A
   031D 3Ar00r00      [13]  589 	ld	A,(_VALUE)
   0320 D6 04         [ 7]  590 	sub	#4
   0322 32r00r00      [13]  591 	ld	(_VALUE),A
   0325 18 0A         [12]  592 	jr	L00105
   0327                     593 	L00104:
   0327 3Ar00r00      [13]  594 	ld	A,(_VALUE)
   032A 87            [ 4]  595 	add	a,a
   032B 87            [ 4]  596 	add	a,a
   032C 12            [ 7]  597 	ld	(DE),A
   032D AF            [ 4]  598 	xor	A
   032E 32r00r00      [13]  599 	ld	(_VALUE),A
   0331                     600 	L00105:
   0331 0C            [ 4]  601 	inc	C
   0332 04            [ 4]  602 	inc	B
   0333 78            [ 4]  603 	ld	A,B
   0334 FE 04         [ 7]  604 	cp	#4
   0336 38 C2         [12]  605 	jr	C,L00107
   0338 DD E1         [14]  606 	pop	IX
                            607 ;	ret
   033A C9            [10]  608 	ret
                            609 ;src\testWYZ.c:619: void SetSPRITES() __naked
                            610 ;	---------------------------------
                            611 ; Function SetSPRITES
                            612 ; ---------------------------------
   033B                     613 _SetSPRITES::
                            614 ;src\testWYZ.c:682: __endasm;
   033B 21r53r03      [10]  615 	ld	HL,#SPRITE_DATA
   033E 11 00 38      [10]  616 	ld	DE,#0x3800
   0341 01 A0 00      [10]  617 	ld	BC,#32*5
   0344 CD 5C 00      [17]  618 	call	0x005C
   0347 11r01r00      [10]  619 	ld	DE,#_SPRBUFFER
   034A 21rF3r03      [10]  620 	ld	HL,#VUMETER
   034D 01 40 00      [10]  621 	ld	BC,#64
   0350 ED B0         [21]  622 	ldir
   0352 C9            [10]  623 	ret
   0353                     624 	SPRITE_DATA:
                            625 ;	0-vum0
   0353 00 00 00 00 00 00   626 	.db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        00 00 00 00 00 00
        00 00 00 00
   0363 00 00 00 00 00 00   627 	.db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        00 00 00 00 00 00
        00 00 00 00
                            628 ;	1-vum1
   0373 00 00 00 00 00 00   629 	.db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x00
        00 00 00 00 00 00
        7F 7F 7F 00
   0383 00 00 00 00 00 00   630 	.db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFE,0xFE,0x00
        00 00 00 00 00 00
        FE FE FE 00
                            631 ;	2-vum2
   0393 00 00 00 00 00 00   632 	.db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x00,0x7F,0x7F,0x7F,0x00
        00 00 7F 7F 7F 00
        7F 7F 7F 00
   03A3 00 00 00 00 00 00   633 	.db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFE,0xFE,0x00,0xFE,0xFE,0xFE,0x00
        00 00 FE FE FE 00
        FE FE FE 00
                            634 ;	3-vum3
   03B3 00 00 00 00 7F 7F   635 	.db	0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x00,0x7F,0x7F,0x7F,0x00,0x7F,0x7F,0x7F,0x00
        7F 00 7F 7F 7F 00
        7F 7F 7F 00
   03C3 00 00 00 00 FE FE   636 	.db	0x00,0x00,0x00,0x00,0xFE,0xFE,0xFE,0x00,0xFE,0xFE,0xFE,0x00,0xFE,0xFE,0xFE,0x00
        FE 00 FE FE FE 00
        FE FE FE 00
                            637 ;	4-vum4
   03D3 7F 7F 7F 00 7F 7F   638 	.db	0x7F,0x7F,0x7F,0x00,0x7F,0x7F,0x7F,0x00,0x7F,0x7F,0x7F,0x00,0x7F,0x7F,0x7F,0x00
        7F 00 7F 7F 7F 00
        7F 7F 7F 00
   03E3 FE FE FE 00 FE FE   639 	.db	0xFE,0xFE,0xFE,0x00,0xFE,0xFE,0xFE,0x00,0xFE,0xFE,0xFE,0x00,0xFE,0xFE,0xFE,0x00
        FE 00 FE FE FE 00
        FE FE FE 00
                            640 ;SPRITE	ATRIBUTE DATAS #########################################################
                            641 ;	for adjust colors, changue the last valor in line
                            642 ;Y,X,SPR,COLOR
   03F3                     643 	VUMETER:
   03F3 A7 08 00 02         644 	.db	167,8,0,2
   03F7 97 08 00 02         645 	.db	151,8,0,2
   03FB 87 08 00 0A         646 	.db	135,8,0,10
   03FF 77 08 00 08         647 	.db	119,8,0,8
   0403 A7 18 00 02         648 	.db	167,24,0,2
   0407 97 18 00 02         649 	.db	151,24,0,2
   040B 87 18 00 0A         650 	.db	135,24,0,10
   040F 77 18 00 08         651 	.db	119,24,0,8
   0413 A7 28 00 02         652 	.db	167,40,0,2
   0417 97 28 00 02         653 	.db	151,40,0,2
   041B 87 28 00 0A         654 	.db	135,40,0,10
   041F 77 28 00 08         655 	.db	119,40,0,8
   0423 A7 38 00 02         656 	.db	167,56,0,2
   0427 97 38 00 02         657 	.db	151,56,0,2
   042B 87 38 00 0A         658 	.db	135,56,0,10
   042F 77 38 00 08         659 	.db	119,56,0,8
                            660 ;END	SPRITE ATRIBUTE DATAS #####################################################
                            661 	.area _CODE
                            662 	.area _INITIALIZER
                            663 	.area _CABS (ABS)
